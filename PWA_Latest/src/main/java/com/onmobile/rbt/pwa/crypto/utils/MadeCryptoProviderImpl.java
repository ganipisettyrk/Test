package com.onmobile.rbt.pwa.crypto.utils;

import java.util.Objects;

import javax.annotation.PostConstruct;

import org.apache.commons.lang3.SystemUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import com.onmobile.made.Decoder;
import com.onmobile.made.Encoder;
import com.onmobile.rbt.pwa.crypto.utils.CryptoProvider;

/**
 * 1. Below are the agreed parameters expected in the same order in string
 * array. </br>
 * a. GMT time in seconds elapsed since 1st jan :- (day of the year) * 86400 +
 * (hour of the day (0-23) * 3600 ) + (minute of the hour * 60 ) + (secs elapsed
 * in current minute)</br>
 * b. Clip ID </br>
 * c. Streaming start time stamp on clip </br>
 * up to millisec </br>
 * d. MSISDN </br>
 * e. Client auth token generated by Voltron </br>
 * f. Device model number </br>
 * g. App ID
 * <p>
 * 2. It expects all the arguments are lower case
 * </p>
 * <p>
 * 3. Character | (pipe) is not expected in any of the parameters.
 * </p>
 * <p>
 * 4. Valid characters considered are below {a-z,0-9,A-Z, @!#$%&'*+-/=?^_`{|}~.}
 * where A-Z will be considered as a-z
 */

public class MadeCryptoProviderImpl implements CryptoProvider {

	private boolean cryptoInitialized = false;

	private Logger logger = LoggerFactory.getLogger(MadeCryptoProviderImpl.class);

	@Value("${pwa.crypto.configuration.path:/opt/shared/conf/crypto}")
	private String cryptoConfigPath;

	@PostConstruct
	private void postConstruct() {
		System.out.println("cryptoConfigPath:: " + cryptoConfigPath);
		if (SystemUtils.IS_OS_UNIX) {
			if (Encoder.getcodes(cryptoConfigPath) != -1 && Decoder.init(cryptoConfigPath) != -1) {
				cryptoInitialized = true;
				logger.debug("MADE native cryptograpy library has been initialized successfully.");
			} else {
				logger.error(
						"MADE native cryptograpy library initialization failed, Possibly codetable.txt , frequency.txt is corrupted or missing!");
				throw new MadeCryptoException(
						"MADE native cryptograpy library initialization failed, Possibly codetable.txt , frequency.txt is corrupted or missing!");
			}
		}
	}

	public String encrypt(String... args) {
		if (cryptoInitialized) {
			Objects.requireNonNull(args, "encryption argument cannot be null!");
			String encryptedStr = Encoder.genCode((Object[]) args);
			logger.debug(loggableEncryptionStr(args, encryptedStr));
			return encryptedStr;
		}
		return null;
	}

	public String decrypt(String input) {
		if (cryptoInitialized) {
			Objects.requireNonNull(input, "decryption argument cannot be null!");
			String decryptedStr = Decoder.decodeString(input);
			logger.debug("decryption input-> {}  decryption output-> {}", input, decryptedStr);
			return decryptedStr;
		}
		return null;
	}

	private String loggableEncryptionStr(String[] inputStrArr, String output) {
		StringBuffer loggerBuffer = new StringBuffer();
		loggerBuffer.append("encryption input-> ");
		for (int i = 0; i < inputStrArr.length; i++) {
			loggerBuffer.append(inputStrArr[i]);
			if (i != inputStrArr.length - 1)
				loggerBuffer.append(",");
		}
		return loggerBuffer.append("encryption output-> ").append(output).toString();
	}
}

