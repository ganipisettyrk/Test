plugins {
	id("com.github.node-gradle.node") version "2.2.4"
}

defaultTasks 'build'

node {
	version = "${nodeVersion}"
	npmVersion = "${npmVersion}"
	download = true
	workDir = file("${project.projectDir}/node")
	nodeModulesDir = file("${project.projectDir}/")
}

// clean node/node_modules/dist
task npmClean(type: Delete) {
	final def webDir = "${rootDir}/angular"
	delete "${webDir}/node"
	delete "${webDir}/node_modules"
	delete "${webDir}/dist"
}

npm_run_build{

def envSet = "$env";
def baseArg = "--base-href=$baseHref";

if(envSet=="dev"){
	println "****************************************************************"
	println "Dev Mode Enabled, Only Default Operator build will be generated"

	args = ['--', baseArg]
}else{
	println "****************************************************************"
	println "Production Mode Enabled"
	def config = ""
	def operatorInputValue = System.properties['operator'] ?: "" 
	def operator = populateOperators(operatorInputValue);

	def indexFilePath = "";
	def folder = new File("${project.projectDir}/operators/$operator");
	if (verifyIfFolderExists(folder)){
		indexFilePath = "operators/$operator/index.html";
	}
	println "indexFilePath - " +indexFilePath
	
	if(indexFilePath == ""){
		config = "--$env"
		args = ['--', baseArg, config]
	}
	else{
		def index = "--index=$indexFilePath";
		config = "--configuration=$operator"
		args = ['--', baseArg, config, index]
	}
}

}

// clean task for npm
task cleanNpm {

}
cleanNpm.dependsOn(npmClean)

task build{}

build.dependsOn(npm_install)
build.dependsOn(npm_run_build)

npm run test-karma

def populateOperators(operatorInputValue) {
println "operator "+operatorInputValue
//Based on commandline operator value this list will be built
	if (operatorInputValue == "") {
		return "Default"
	} else {
		def folder = new File("${project.projectDir}/operators/$operatorInputValue");
		if (verifyIfFolderExists(folder)){
			return "$operatorInputValue";
		} else {
			throw new GradleException(operatorInputValue + ' operator folder does not exists. Please check given operator value');
		}	
	}
}

def verifyIfFolderExists(folder) {
// This function will check if directory exists or not
	if(!folder.exists()) {
		return false;
	} else {
		return true;
	}
}