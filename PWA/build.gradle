buildscript {
  repositories {
    jcenter{
    	url artifactoryUri 
    }
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
  	classpath ("org.jfrog.buildinfo:build-info-extractor-gradle:4.24.5")
    classpath ("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
		classpath "org.gradle-webtools.minify:gradle-minify-plugin:1.3.0"
  }
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: "org.gradlewebtools.minify"

repositories {
	jcenter{
		url artifactoryUri
	}
	maven {
		url 'https://repo.spring.io/libs-milestone'
	}
}

configurations {
    providedRuntime
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

task cleanFolders {
	dependsOn clean
	delete "$buildDir/$libDownloadFolder"
	
	def gradleArtifactsEnvHome = "$System.env.GRADLE_ARTIFACTS_HOME".trim()
	println 'Evaluating & validating Gradle Artifacts Home...'

	if (gradleArtifactsEnvHome.length()>0 && gradleArtifactsEnvHome!="null") {
		println 'Found Environment variable: GRADLE_ARTIFACTS_HOME And using the same to Process the task: copyArtifactsToBuild.'
		delete gradleArtifactsEnvHome+"/caches/modules-2/files-2.1/com.onmobile.rbt.storeclient/storeclientrbt/release"
	} else {
		println 'Found Gradle script Propery: gradleArtifactsHome And using the same to Process the task: copyArtifactsToBuild.'
		delete gradleArtifactsHome+"/caches/modules-2/files-2.1/com.onmobile.rbt.storeclient/storeclientrbt/release"
	}
	mkdir "$buildDir/$libDownloadFolder"
}

defaultTasks = ['cleanFolders', 'bootJar'];
def projectReleseVersion = getCurrentGitBranch();
def operatorInputValue = System.properties['operator'] ?: "" ;
def operator = populateOperators(operatorInputValue);

def populateOperators(operatorInputValue) {

println "operator "+operatorInputValue
//Based on commandline operator value this list will be built
	if (operatorInputValue == "") {
		return "Default";
	} else {
		def folder = new File("${project.projectDir}/angular/operators/$operatorInputValue");
		if (verifyIfFolderExists(folder)){
			return "$operatorInputValue";
		} else {
			throw new GradleException(operatorInputValue + ' operator folder does not exists. Please check given operator value');
		}
	}
}

def verifyIfFolderExists(folder) {
// This function will check if directory exists or not
	if(!folder.exists()) {
		return false;
	} else {
		return true;
	}
}

dependencies {

//Internal
    compile 'com.onmobile.rbt.storeclient:storeclientrbt:release'

//lib 
	compile('org.springframework.boot:spring-boot-starter-web')
	compile 'org.springframework.mobile:spring-mobile-device:2.0.0.M3'
	compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
	compile 'org.springframework.boot:spring-boot-starter-log4j2'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
	compile group: 'org.apache.axis2', name: 'axis2-adb', version: '1.6.2'
	compile group: 'org.apache.axis2', name: 'axis2-kernel', version: '1.6.2'
	compile group: 'org.tuckey', name: 'urlrewritefilter', version: '4.0.4'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
	compile 'com.onmobile.rbt.common.lib:common-http-client:1.1dev4'
	compile 'com.onmobile.rbt.common.lib:catalog-service-client:1.0'
	compile 'com.onmobile.rbt.common.lib-ext:encryptor:1.0'
	compile 'org.jasypt:jasypt:1.9.3'
	compile group: 'org.apache.commons', name: 'commons-csv', version: '1.8'
}

bootJar {
launchScript()
archiveName = "$jarNameValue$jarExtValue";

manifest {
	attributes(
	'Gradle-Version': "$gradle.gradleVersion",
	'Created-By': jVersion,
	'Built-By': System.properties['user.name'],
	'Name': 'PWA',
	'Product-Title': "${project.name}",
	'Product-Version': "${projectReleseVersion}",
	'Product-Vendor': 'OnMobile Global Limited',
	'Creation-Date': new Date().format("dd-MM-yyyy HH:mm"),
	'jarName': jarNameValue,
	'Operator': operator,
	'Storefront': storefrontName
	)
}
}

task cleanStaticFolder(type: Delete) {
	doFirst {
		print("java:: cleanStaticFolder: Cleaning static folder ");
	}
	delete fileTree('src/main/resources/static/') {
		include '*.*'
		include 'css/**'
		include 'image/**'
		include 'scripts/**'
		include 'assets/**'
		include 'svg/**'
	}
}

task doJsMinify(type: org.gradlewebtools.minify.JsMinifyTask) {
	srcDir = project.file("angular/dist/angular/scripts")
	dstDir = project.file("angular/dist/angular/scripts")
	options.ignoreMinFiles = true
}

task doCssMinify(type: org.gradlewebtools.minify.CssMinifyTask) {
    srcDir = project.file("angular/dist/angular/css")
    dstDir = project.file("angular/dist/angular/css")
		options.ignoreMinFiles = true
}

task copyAngularFiles(type: Copy) {
	dependsOn cleanStaticFolder, ':angular:build'
	doFirst {
		print("java:: copyAngularFiles: copying to static folder ");
	}
	from('angular/dist/angular') {
		include '*.*'
		include 'scripts/**'
		include 'svg/**'
		include 'css/**'
		include 'image/**'
		include 'assets/**'	
	}
	into('src/main/resources/static/')	
}

task copyMinifiedFiles(type: Copy) {
	dependsOn copyAngularFiles, doCssMinify, doJsMinify
	doFirst {
		print("task:: copyMinifiedFiles: copying to minified css and js files to static folder ");
	}
	from('angular/dist/angular') {
		include 'css/**'
		include 'scripts/**'
	}
	into('src/main/resources/static/')	
}

compileJava.dependsOn(copyMinifiedFiles)

def getCurrentGitBranch() {
    def gitBranch = "Unknown-branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
			println "error " + e;
    }
    return gitBranch;
}